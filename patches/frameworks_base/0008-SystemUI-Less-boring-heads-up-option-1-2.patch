From a4073cabdbdfb191069a78f6beb127636d52f40f Mon Sep 17 00:00:00 2001
From: ezio84 <brabus84@gmail.com>
Date: Fri, 26 Jul 2019 12:45:22 +0300
Subject: [PATCH 8/9] SystemUI: Less boring heads up option [1/2]

Q: don't skip the new Bubbles (the circular popping up notifications
like the Dialer one when a call is active and you press the home button)
Reference: https://github.com/ezio84/abc_frameworks_base/commit/c3d6f7d386286a4e55a3e0644782827705db7168#diff-c38ee79f64d8dc57e7757863d741be46

Allow to show heads up only for dialer and messaging
app when they are not in foreground

neobuddy89:
* Added clock app too in whitelist.
* Adapted and squashed for A12.
* Slightly optimized apps check

ghostrider-reborn:
* Cleanup and rewrite logic
* Consider notification category and importance

Co-authored-by: Adithya R <gh0strider.2k18.reborn@gmail.com>
Change-Id: Iec0a628359a219d6525f82a3d6b35212e70101d8
Signed-off-by: penglezos <panagiotisegl@gmail.com>
---
 core/java/android/provider/Settings.java      |  6 +++
 .../NotificationInterruptLogger.kt            |  8 ++++
 ...otificationInterruptStateProviderImpl.java | 45 +++++++++++++++++++
 3 files changed, 59 insertions(+)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 67e22ed3a7c7..a06c134cb263 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6086,6 +6086,12 @@ public final class Settings {
         @Readable
         public static final String VOLUME_KEY_CURSOR_CONTROL = "volume_key_cursor_control";
 
+        /**
+         * Whether to show heads up only for dialer and sms apps
+         * @hide
+         */
+        public static final String LESS_BORING_HEADS_UP = "less_boring_heads_up";
+
         /**
          * IMPORTANT: If you add a new public settings you also have to add it to
          * PUBLIC_SETTINGS below. If the new setting is hidden you have to add
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptLogger.kt b/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptLogger.kt
index 334e08d5a78f..c53be6ba19fd 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptLogger.kt
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptLogger.kt
@@ -79,6 +79,14 @@ class NotificationInterruptLogger @Inject constructor(
         })
     }
 
+    fun logNoHeadsUpBoringNotification(entry: NotificationEntry) {
+        buffer.log(TAG, DEBUG, {
+            str1 = entry.logKey
+        }, {
+            "No heads up: boring notification: $str1"
+        })
+    }
+
     fun logNoHeadsUpPackageSnoozed(entry: NotificationEntry) {
         buffer.log(TAG, DEBUG, {
             str1 = entry.logKey
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptStateProviderImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptStateProviderImpl.java
index 510086d4892b..a7cadbf3eda0 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptStateProviderImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/interruption/NotificationInterruptStateProviderImpl.java
@@ -27,11 +27,17 @@ import static com.android.systemui.statusbar.notification.interruption.Notificat
 
 import android.app.Notification;
 import android.app.NotificationManager;
+import android.content.ContentResolver;
+import android.content.Context;
 import android.database.ContentObserver;
 import android.hardware.display.AmbientDisplayConfiguration;
 import android.os.Handler;
 import android.os.PowerManager;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.provider.Telephony.Sms;
 import android.service.notification.StatusBarNotification;
+import android.telecom.TelecomManager;
 
 import androidx.annotation.NonNull;
 
@@ -70,6 +76,7 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
     private final List<NotificationInterruptSuppressor> mSuppressors = new ArrayList<>();
     private final StatusBarStateController mStatusBarStateController;
     private final KeyguardStateController mKeyguardStateController;
+    private final ContentResolver mContentResolver;
     private final PowerManager mPowerManager;
     private final AmbientDisplayConfiguration mAmbientDisplayConfiguration;
     private final BatteryController mBatteryController;
@@ -87,6 +94,10 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
     @VisibleForTesting
     protected boolean mUseHeadsUp = false;
 
+    private boolean mLessBoringHeadsUp = false;
+    private TelecomManager mTelecomManager;
+    private Context mContext;
+
     public enum NotificationInterruptEvent implements UiEventLogger.UiEventEnum {
         @UiEvent(doc = "FSI suppressed for suppressive GroupAlertBehavior")
         FSI_SUPPRESSED_SUPPRESSIVE_GROUP_ALERT_BEHAVIOR(1235),
@@ -117,6 +128,8 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
 
     @Inject
     public NotificationInterruptStateProviderImpl(
+            Context context,
+            ContentResolver contentResolver,
             PowerManager powerManager,
             AmbientDisplayConfiguration ambientDisplayConfiguration,
             BatteryController batteryController,
@@ -133,6 +146,9 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
             SystemClock systemClock,
             GlobalSettings globalSettings,
             EventLog eventLog) {
+        mContext = context;
+        mTelecomManager = (TelecomManager) context.getSystemService(Context.TELECOM_SERVICE);
+        mContentResolver = contentResolver;
         mPowerManager = powerManager;
         mBatteryController = batteryController;
         mAmbientDisplayConfiguration = ambientDisplayConfiguration;
@@ -162,6 +178,9 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
                         mHeadsUpManager.releaseAllImmediately();
                     }
                 }
+                mLessBoringHeadsUp = Settings.System.getIntForUser(mContentResolver,
+                        Settings.System.LESS_BORING_HEADS_UP, 0,
+                        UserHandle.USER_CURRENT) == 1;
             }
         };
 
@@ -173,6 +192,10 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
             mGlobalSettings.registerContentObserver(
                     mGlobalSettings.getUriFor(SETTING_HEADS_UP_TICKER), true,
                     headsUpObserver);
+            mContentResolver.registerContentObserver(
+                    Settings.System.getUriFor(Settings.System.LESS_BORING_HEADS_UP),
+                    true,
+                    headsUpObserver);
         }
         headsUpObserver.onChange(true); // set up
     }
@@ -428,6 +451,11 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
             return false;
         }
 
+        if (mLessBoringHeadsUp && isBoringHeadsUp(entry)) {
+            if (log) mLogger.logNoHeadsUpBoringNotification(entry);
+            return false;
+        }
+
         final boolean isSnoozedPackage = isSnoozedPackage(sbn);
         final boolean hasFsi = sbn.getNotification().fullScreenIntent != null;
 
@@ -535,6 +563,23 @@ public class NotificationInterruptStateProviderImpl implements NotificationInter
         return true;
     }
 
+    private boolean isBoringHeadsUp(NotificationEntry entry) {
+        final String packageName = entry.getSbn().getPackageName();
+        final String category = entry.getSbn().getNotification().category;
+
+        final boolean isCategoryAllowed = (category != null) && List.of(
+            Notification.CATEGORY_CALL, Notification.CATEGORY_ALARM,
+            Notification.CATEGORY_REMINDER, Notification.CATEGORY_NAVIGATION
+        ).contains(category);
+
+        final boolean isLessBoring = isCategoryAllowed
+                || entry.getChannel().isImportantConversation()
+                || packageName.equals(mTelecomManager.getDefaultDialerPackage())
+                || packageName.equals(Sms.getDefaultSmsPackage(mContext));
+
+        return !isLessBoring;
+    }
+
     /**
      * Common checks between regular & AOD heads up and bubbles.
      *
-- 
2.44.0

